class Payment < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Payment, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def amount: () -> Integer

    def amount=: (Integer) -> Integer

    def amount?: () -> bool

    def amount_changed?: () -> bool

    def amount_change: () -> [ Integer?, Integer? ]

    def amount_will_change!: () -> void

    def amount_was: () -> Integer?

    def amount_previously_changed?: () -> bool

    def amount_previous_change: () -> Array[Integer?]?

    def amount_previously_was: () -> Integer?

    def amount_before_last_save: () -> Integer?

    def amount_change_to_be_saved: () -> Array[Integer?]?

    def amount_in_database: () -> Integer?

    def saved_change_to_amount: () -> Array[Integer?]?

    def saved_change_to_amount?: () -> bool

    def will_save_change_to_amount?: () -> bool

    def restore_amount!: () -> void

    def clear_amount_change: () -> void

    def paid_at: () -> ActiveSupport::TimeWithZone

    def paid_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def paid_at?: () -> bool

    def paid_at_changed?: () -> bool

    def paid_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def paid_at_will_change!: () -> void

    def paid_at_was: () -> ActiveSupport::TimeWithZone?

    def paid_at_previously_changed?: () -> bool

    def paid_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def paid_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def paid_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def paid_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def paid_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_paid_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_paid_at?: () -> bool

    def will_save_change_to_paid_at?: () -> bool

    def restore_paid_at!: () -> void

    def clear_paid_at_change: () -> void

    def kind: () -> Integer

    def kind=: (Integer) -> Integer

    def kind?: () -> bool

    def kind_changed?: () -> bool

    def kind_change: () -> [ Integer?, Integer? ]

    def kind_will_change!: () -> void

    def kind_was: () -> Integer?

    def kind_previously_changed?: () -> bool

    def kind_previous_change: () -> Array[Integer?]?

    def kind_previously_was: () -> Integer?

    def kind_before_last_save: () -> Integer?

    def kind_change_to_be_saved: () -> Array[Integer?]?

    def kind_in_database: () -> Integer?

    def saved_change_to_kind: () -> Array[Integer?]?

    def saved_change_to_kind?: () -> bool

    def will_save_change_to_kind?: () -> bool

    def restore_kind!: () -> void

    def clear_kind_change: () -> void

    def name: () -> String

    def name=: (String) -> String

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def note: () -> String

    def note=: (String) -> String

    def note?: () -> bool

    def note_changed?: () -> bool

    def note_change: () -> [ String?, String? ]

    def note_will_change!: () -> void

    def note_was: () -> String?

    def note_previously_changed?: () -> bool

    def note_previous_change: () -> Array[String?]?

    def note_previously_was: () -> String?

    def note_before_last_save: () -> String?

    def note_change_to_be_saved: () -> Array[String?]?

    def note_in_database: () -> String?

    def saved_change_to_note: () -> Array[String?]?

    def saved_change_to_note?: () -> bool

    def will_save_change_to_note?: () -> bool

    def restore_note!: () -> void

    def clear_note_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Payment, Integer]
    include Enumerable[Payment]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Payment, Integer]
  end
end
